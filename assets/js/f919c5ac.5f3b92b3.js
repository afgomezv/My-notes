"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9894],{6995:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>t,toc:()=>d});var s=n(4848),a=n(8453);const o={sidebar_position:2},i="Conceptos Principales",t={id:"express/conceptos-principales",title:"Conceptos Principales",description:"Request Body",source:"@site/backend/express/conceptos-principales.md",sourceDirName:"express",slug:"/express/conceptos-principales",permalink:"/my-notes/backend/express/conceptos-principales",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Express framework de node.js",permalink:"/my-notes/backend/express/fundamentos"},next:{title:"RestAPI",permalink:"/my-notes/backend/express/restapi"}},l={},d=[{value:"Request Body",id:"request-body",level:2},{value:"Request Params",id:"request-params",level:2},{value:"Queries",id:"queries",level:2},{value:"M\xe9todo All",id:"m\xe9todo-all",level:2},{value:"Middlewares",id:"middlewares",level:2},{value:"middlewares populares",id:"middlewares-populares",level:3}];function p(e){const r={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"conceptos-principales",children:"Conceptos Principales"}),"\n",(0,s.jsx)(r.h2,{id:"request-body",children:"Request Body"}),"\n",(0,s.jsxs)(r.p,{children:["Cuando enviamos datos al servidor ",(0,s.jsx)(r.strong,{children:"request"}),", realmente se envia un documento que tiene un titulo (ejemplo la url), este documeto tiene un contenido que puede ser un objeto ",(0,s.jsx)(r.strong,{children:"json"})," y tambien se envia una cabecera (",(0,s.jsx)(r.em,{children:"header"}),") para dar informacion del contenido que estoy enviando. (formato del contenido ejemplo json y el estado - 200)."]}),"\n",(0,s.jsxs)(r.p,{children:["Esta estructura se le conoce con requeste body, esta estructura tambien aplica cuando tenemos respuesta (",(0,s.jsx)(r.em,{children:"response"}),") del servidor"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"Request Body",src:n(872).A+"",title:"request body",width:"286",height:"172"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"endpoint"})," la ruta"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"header"})," formato de la informaci\xf3n y le estado"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"body"})," el contenido de la informaci\xf3n"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'const express = require("express");\r\n\r\nconst app = express();\r\n\r\napp.use(express.text()); // enviamos un texto\r\napp.use(express.json()); // enviamos un json\r\napp.use(express.urlencoded({ extended: false }));\r\n//enviamos un formulario\r\n\r\napp.post("/user", (req, res) => {\r\n  console.log(req.body);\r\n  res.send("Nuevo usuario creado");\r\n});\r\n\r\napp.listen(3000);\r\nconsole.log(`server on port ${3000}`);\n'})}),"\n",(0,s.jsx)(r.h2,{id:"request-params",children:"Request Params"}),"\n",(0,s.jsx)(r.p,{children:"Se llama parametros a los valores que pueden ir cambiando, suele ir representado en las rutas con 2 puntos(:) para indicar que es un parametro."}),"\n",(0,s.jsx)(r.p,{children:"Los parametro tiene las mismas propiedades de las variables en JavaScript."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'const express = require("express");\r\n\r\nconst app = express();\r\n\r\napp.get("/hello/:username", (req, res) => {\r\n  //console.log(req.params.username);\r\n  console.log(typeof req.params.username);\r\n  res.send(`hello ${req.params.username.toUpperCase()}`);\r\n});\r\n\r\napp.get("/add/:x/:y", (req, res) => {\r\n  const { x, y } = req.params;\r\n  res.send(`Result: ${parseInt(x) + parseInt(y)} `);\r\n});\r\n\r\napp.get("/users/:username/photo", (req, res) => {\r\n  console.log(req.params);\r\n  if (req.params.username === "fazt") {\r\n    return res.sendFile("./img/Javascript.png", {\r\n      root: __dirname,\r\n    });\r\n  }\r\n  res.send("el usario no tiene acceso");\r\n});\r\n\r\napp.get("/name/:name/age/:age", (req, res) => {\r\n  console.log(req.params);\r\n  res.send(`El usuario ${req.params.name} tiene ${req.params.age} a\xf1os`);\r\n});\r\n\r\napp.listen(3000);\r\nconsole.log(`server on port ${3000}`);\n'})}),"\n",(0,s.jsx)(r.h2,{id:"queries",children:"Queries"}),"\n",(0,s.jsxs)(r.p,{children:["Las queires se utiliza para enviar informacion en las urls. se utiliza el signo de interrogacion (",(0,s.jsx)(r.strong,{children:"?"}),") para enviar la informaci\xf3n, se puede enviar una o varias variables. para enviar mas de una variables se utiliza el signo ampersand (",(0,s.jsx)(r.strong,{children:"&"}),")"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Se puede combinar los parametros y queries"}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'app.get("/search", (req, res) => {\r\n  console.log(req.query);\r\n  if (req.query.q === "javascript books") {\r\n    res.send("lista de libros de javascript");\r\n  } else {\r\n    res.send("pagina normal");\r\n  }\r\n});\r\n//URL\r\n//http://localhost:3000/search?q=javascript%20books\r\n//http://localhost:3000/search?user=andrey&user=marcos&user=mateo\n'})}),"\n",(0,s.jsx)(r.h2,{id:"m\xe9todo-all",children:"M\xe9todo All"}),"\n",(0,s.jsxs)(r.p,{children:["El m\xe9todo ",(0,s.jsx)(r.strong,{children:"ALL"})," puede ser cualquiera de los m\xe9todos http (",(0,s.jsx)(r.em,{children:"get"}),", ",(0,s.jsx)(r.em,{children:"post"}),", ",(0,s.jsx)(r.em,{children:"put"}),", ",(0,s.jsx)(r.em,{children:"delete"})," y ",(0,s.jsx)(r.em,{children:"patch"}),")."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'app.all("/info", (req, res) => {\r\n  res.send("server info");\r\n});\n'})}),"\n",(0,s.jsx)(r.h2,{id:"middlewares",children:"Middlewares"}),"\n",(0,s.jsxs)(r.p,{children:["Un middleware es una funci\xf3n que se puede ejecutar antes o despu\xe9s del manejo de una ruta. Esta funci\xf3n tiene acceso al objeto ",(0,s.jsx)(r.strong,{children:"Request"}),", ",(0,s.jsx)(r.strong,{children:"Response"})," y la funci\xf3n next()."]}),"\n",(0,s.jsx)(r.p,{children:"Las funciones middleware suelen ser utilizadas como mecanismo para verificar niveles de acceso antes de entrar en una ruta, manejo de errores, validaci\xf3n de datos, etc."}),"\n",(0,s.jsx)(r.p,{children:"La siguiente imagen es la representa de un proceso de autenticacion a una pagina web"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"Middlewares",src:n(5755).A+"",title:"Midlewares",width:"812",height:"313"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'const express = require("express");\r\n\r\nconst app = express();\r\n\r\napp.use((req, res, next) => {\r\n  console.log(`Route: ${req.url} Methodo: ${req.method}`);\r\n  next();\r\n});\r\n\r\napp.get("/profile", (req, res) => {\r\n  res.send("profile page");\r\n});\r\n\r\napp.all("/about", (req, res) => {\r\n  res.send("about page");\r\n});\r\n\r\napp.use((req, res, next) => {\r\n  if (req.query.login === "fazt@faztweb.com") {\r\n    next();\r\n  } else {\r\n    res.send("No autorizado");\r\n  }\r\n});\r\n\r\napp.get("/dashboard", (req, res) => {\r\n  res.send("Dashboard Page");\r\n});\r\n\r\napp.listen(3000);\r\nconsole.log(`server on port ${3000}`);\n'})}),"\n",(0,s.jsx)(r.p,{children:"Las funciones middleware son muy importantes en una aplicaci\xf3n de de Express js porque con ellas se pueden realizar validaciones, gestionar errores, sin la necesidad de llegar hasta la definici\xf3n de las rutas. Por lo tanto es indispensable aprender a utilizarlas."}),"\n",(0,s.jsx)(r.h3,{id:"middlewares-populares",children:"middlewares populares"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Morgan"}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'app.use(express.json());\r\napp.use(morgan("dev"));\r\n\r\napp.get("/profile", (req, res) => {\r\n  console.log(req.body);\r\n  res.send("profile page");\r\n});\r\n\r\napp.all("/about", (req, res) => {\r\n  res.send("about page");\r\n});\n'})})]})}function c(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},872:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/imagen03-314a063e091f9b77edee45166b4f136e.jpg"},5755:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/imagen04-f3df7934fe857328facb9a28348a91f2.jpg"},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>t});var s=n(6540);const a={},o=s.createContext(a);function i(e){const r=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);